I"}‹<p><strong>This article is for Demo purpose</strong></p>

<p>The article was originally on <a href="https://github.com/risan/risanb.com/blob/master/content/posts/python-notes-from-intro-to-machine-learning/index.md">this repo</a></p>

<p>I rarely use Python. I only have one repository at Github that is written in Python: <a href="https://github.com/risan/iris-flower-classifier">iris-flower-classifier</a>. And it was written two years ago!</p>

<p>A few days ago I took this free course from Udacity: <a href="https://eu.udacity.com/course/intro-to-machine-learning--ud120">Intro to Machine Learning</a>. The machine learning related codes are quite easy to grasp since it simply uses the <a href="http://scikit-learn.org/">scikit-learn</a> modules. But most of the supporting Python modules that are provided by this course were like a black-box to me. I had no idea how to download a file in Python or what‚Äôs the difference between a list, a tuple and a dictionary.</p>

<p>That‚Äôs why I decided to read all of the provided Python modules and implement it myself. I ended up refactor most of the code so it‚Äôs easier to understand: <a href="https://github.com/risan/intro-to-machine-learning">github.com/risan/intro-to-machine-learning</a>.</p>

<p>So here are some notes and snippets of Python that I‚Äôve been collecting so far (I‚Äôm not even halfway through the course üòù). Also, note that the codes here are still using Python version 2.7.</p>

<h3 id="example-table-overflow-table">Example Table overflow-table</h3>

<div class="overflow-table">

  <table>
    <thead>
      <tr>
        <th style="text-align: left">Markdown</th>
        <th style="text-align: left">HTML</th>
        <th style="text-align: center">Rendered Output</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td style="text-align: left"><code class="language-plaintext highlighter-rouge">[Example Link](#link)</code></td>
        <td style="text-align: left"><code class="language-plaintext highlighter-rouge">&lt;a href="#link"&gt;Example Link&lt;/a&gt;</code></td>
        <td style="text-align: center"><a href="#Link">Example Link</a></td>
      </tr>
      <tr>
        <td style="text-align: left"><code class="language-plaintext highlighter-rouge">_Be Italic_</code></td>
        <td style="text-align: left"><code class="language-plaintext highlighter-rouge">&lt;em&gt;Be Italic&lt;em/&gt;</code></td>
        <td style="text-align: center"><em>Be Italic</em></td>
      </tr>
      <tr>
        <td style="text-align: left"><code class="language-plaintext highlighter-rouge">**Be Bold**</code></td>
        <td style="text-align: left"><code class="language-plaintext highlighter-rouge">&lt;strong&gt;Be Italic&lt;strong/&gt;</code></td>
        <td style="text-align: center"><strong>Be Bold</strong></td>
      </tr>
    </tbody>
  </table>

</div>

<p>*) <em>resize to see difference</em></p>

<h3 id="example-table-without-overflow">Example Table without-overflow</h3>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Markdown</th>
      <th style="text-align: left">HTML</th>
      <th style="text-align: center">Rendered Output</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">[Example Link](#link)</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">&lt;a href="#link"&gt;Example Link&lt;/a&gt;</code></td>
      <td style="text-align: center"><a href="#Link">Example Link</a></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">_Be Italic_</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">&lt;em&gt;Be Italic&lt;em/&gt;</code></td>
      <td style="text-align: center"><em>Be Italic</em></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">**Be Bold**</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">&lt;strong&gt;Be Italic&lt;strong/&gt;</code></td>
      <td style="text-align: center"><strong>Be Bold</strong></td>
    </tr>
  </tbody>
</table>

<p>*) <em>resize to see difference</em></p>

<h3 id="main-entry-file">Main Entry File</h3>

<p>Suppose our Python project is stored in <code class="language-plaintext highlighter-rouge">/foo/bar</code> directory. And this application has one file that serves as the single entry point. We can name this file <code class="language-plaintext highlighter-rouge">__main__.py</code> so we can run this project simply be referencing its directory path:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Referencing its directory.</span>
<span class="nv">$ </span>python /foo/bar

<span class="c"># It's equivalent to this.</span>
<span class="nv">$ </span>python /foo/bar/__main__.py
</code></pre></div></div>

<h3 id="import-python-module-dynamically">Import Python Module Dynamically</h3>

<p>Suppose we would like to import a Python module dynamically based on a variable value. We can achieve this through the <a href="https://docs.python.org/2/library/functions.html#__import__"><code class="language-plaintext highlighter-rouge">__import__</code></a> function:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">module_name</span> <span class="o">=</span> <span class="s">"numpy"</span>

<span class="nb">__import__</span><span class="p">(</span><span class="n">module_name</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="multiple-returns-in-python">Multiple Returns in Python</h3>

<p>In Python, it‚Äôs possible for a function or a method to return multiple values. We can do this simply by separating each return value by a comma:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test</span><span class="p">():</span>
    <span class="k">return</span> <span class="mi">100</span><span class="p">,</span> <span class="s">"foo"</span>

<span class="n">someNumber</span><span class="p">,</span> <span class="n">someString</span> <span class="o">=</span> <span class="n">test</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="importing-modules-outside-of-the-directory">Importing Modules Outside of the Directory</h3>

<p>In order to import a module from outside of the directory, we need to add that module‚Äôs directory path into the current file with <code class="language-plaintext highlighter-rouge">sys.path.append</code>. Suppose we have the following directory structure:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>|--foo
| |-- bar.py
|
|-- tools
| |-- speak_yoda.py
</code></pre></div></div>

<p>If we want to use the <code class="language-plaintext highlighter-rouge">speak_yoda.py</code> module within the <code class="language-plaintext highlighter-rouge">bar.py</code>, we can do the following:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># /foo/bar.py
</span><span class="kn">import</span> <span class="nn">os</span>

<span class="c1"># Use relative path to tools directory.
</span><span class="n">sys</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"../tools"</span><span class="p">)</span>

<span class="kn">import</span> <span class="nn">speak_yoda</span>
</code></pre></div></div>

<p>However, this won‚Äôt work if we run the <code class="language-plaintext highlighter-rouge">baz.py</code> file from outside of its <code class="language-plaintext highlighter-rouge">foo</code> directory:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># It works inside of the /foo directory.</span>
<span class="nv">$ </span><span class="nb">cd</span> /foo
<span class="nv">$ </span>python bar.py

<span class="c"># But it won't work if the code runs from outside of /foo directory.</span>
<span class="nv">$ </span>python foo/bar.py
</code></pre></div></div>

<p>To solve this problem we can refer to the <code class="language-plaintext highlighter-rouge">tools</code> directory using its absolute path.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># /foo/bar.py
</span><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="c1"># Get the directory name for this file.
</span><span class="n">current_dirname</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">realpath</span><span class="p">(</span><span class="n">__file__</span><span class="p">))</span>

<span class="c1"># Use the absolute path to the tools directory
</span><span class="n">tools_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">dirname</span><span class="p">,</span> <span class="s">"../tools"</span><span class="p">))</span>
<span class="n">sys</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">tools_path</span><span class="p">)</span>

<span class="kn">import</span> <span class="nn">speak_yoda</span>
</code></pre></div></div>

<h2 id="output">Output</h2>

<h3 id="print-the-emojis">Print The Emojis</h3>

<p>It turns out you can‚Äôt just print an emoji or any other Unicode characters to the console. You need to specify the encoding type beforehand:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># coding: utf8
</span>
<span class="k">print</span><span class="p">(</span><span class="s">"üòÖ"</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="pretty-print">Pretty Print</h3>

<p>We can use the <code class="language-plaintext highlighter-rouge">pprint</code> module to pretty-print Python data structure with a configurable indentation:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pprint</span>
<span class="n">pp</span> <span class="o">=</span> <span class="n">pprint</span><span class="p">.</span><span class="n">PrettyPrinter</span><span class="p">(</span><span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

<span class="n">pp</span><span class="p">.</span><span class="n">pprint</span><span class="p">(</span><span class="n">people</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="working-with-pathname">Working with Pathname</h2>

<p>Read more about pathname manipulations in the <a href="https://docs.python.org/2/library/os.path.html"><code class="language-plaintext highlighter-rouge">os.path</code> documentation</a>.</p>

<h3 id="get-filename-from-url">Get Filename From URL</h3>

<p>Suppose the last segment of the URL contains a filename that we would like to download. We can extract this filename with the following code:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">from</span> <span class="nn">urlparse</span> <span class="kn">import</span> <span class="n">urlparse</span>

<span class="n">url</span> <span class="o">=</span> <span class="s">"https://example.com/foo.txt"</span>

<span class="n">url_components</span> <span class="o">=</span> <span class="n">urlparse</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>

<span class="n">filename</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">basename</span><span class="p">(</span><span class="n">url_components</span><span class="p">.</span><span class="n">path</span><span class="p">)</span> <span class="c1"># foo.txt
</span></code></pre></div></div>

<h3 id="check-if-file-exists">Check if File Exists</h3>

<p>To check whether the given file path exists or not:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os</span>

<span class="n">is_exists</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">isfile</span><span class="p">(</span><span class="s">"foo.txt"</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="create-a-directory-if-it-does-not-exists">Create a Directory if It Does Not Exists</h3>

<p>To create a directory only if it does not exist:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">errno</span>

<span class="k">try</span><span class="p">:</span>
    <span class="n">os</span><span class="p">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">directory_path</span><span class="p">)</span>
<span class="k">except</span> <span class="nb">OSError</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">e</span><span class="p">.</span><span class="n">errno</span> <span class="o">!=</span> <span class="n">errno</span><span class="p">.</span><span class="n">EEXIST</span><span class="p">:</span>
        <span class="k">raise</span>
</code></pre></div></div>

<h2 id="working-with-files">Working with Files</h2>

<h3 id="downloading-a-file">Downloading a File</h3>

<p>We can use the <code class="language-plaintext highlighter-rouge">urllib</code> module to download a file in Python. The first argument is the file URL that we would like to download. The second argument is the optional filename that will be used to store the file.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">urllib</span>

<span class="n">urllib</span><span class="p">.</span><span class="n">urlretrieve</span><span class="p">(</span><span class="s">"https://example.com/foo.txt"</span><span class="p">,</span> <span class="s">"foo.txt"</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="extracting-tar-file">Extracting Tar File</h3>

<p>There‚Äôs a built-in <code class="language-plaintext highlighter-rouge">tarfile</code> module that we can use to work with Tar file in Python. To extract the <code class="language-plaintext highlighter-rouge">tar.gz</code> file we can use the following code:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">tarfile</span>

<span class="c1"># Open the file.
</span><span class="n">tfile</span> <span class="o">=</span> <span class="n">tarfile</span><span class="p">.</span><span class="nb">open</span><span class="p">(</span><span class="s">"foo.tar.gz"</span><span class="p">)</span>

<span class="c1"># Extract the file to the given path.
</span><span class="n">tfile</span><span class="p">.</span><span class="n">extractall</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</code></pre></div></div>

<p>We can pass the <code class="language-plaintext highlighter-rouge">mode</code> argument to the <code class="language-plaintext highlighter-rouge">open</code> method. By default, the <code class="language-plaintext highlighter-rouge">mode</code> would be <code class="language-plaintext highlighter-rouge">r</code>‚Äîreading mode with transparent compression. There are also other mode options that we can use:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">r:gz</code>: Reading mode with gzip compression.</li>
  <li><code class="language-plaintext highlighter-rouge">r:</code>: Reading mode without compression.</li>
  <li><code class="language-plaintext highlighter-rouge">a</code>: Appending mode without compression.</li>
  <li><code class="language-plaintext highlighter-rouge">w</code>: Writting mode without compression.</li>
  <li>Checkout other available options in <a href="https://docs.python.org/2/library/tarfile.html">tarfile documentation</a>.</li>
</ul>

<h2 id="working-with-list">Working with List</h2>

<h3 id="generate-a-list-of-random-numbers">Generate a List of Random Numbers</h3>

<p>Use the <code class="language-plaintext highlighter-rouge">for..in</code> syntax to generate a list of random numbers in a one-liner style.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">random</span>

<span class="c1"># Initialize internal state of random generator.
</span><span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>

<span class="c1"># Generate random points.
</span><span class="n">randomNumbers</span> <span class="o">=</span> <span class="p">[</span><span class="n">random</span><span class="p">.</span><span class="n">random</span><span class="p">()</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)]</span>
<span class="c1"># [0.6394267984578837, 0.025010755222666936, 0.27502931836911926, ...]
</span></code></pre></div></div>

<h3 id="pair-values-from-two-lists">Pair Values from Two Lists</h3>

<p>The built-in <code class="language-plaintext highlighter-rouge">zip</code> function can pair values from two lists. However, this <code class="language-plaintext highlighter-rouge">zip</code> function will return a list of tuples instead. To get a list of value pairs, we can combine it with <code class="language-plaintext highlighter-rouge">for..in</code> syntax:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">coordinates</span> <span class="o">=</span> <span class="p">[[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">15</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">])]</span>
<span class="c1"># [[5, 0], [10, 1], [15, 0]]
</span></code></pre></div></div>

<h3 id="splitting-a-list">Splitting a List</h3>

<p>We can easily split a list in Python by specifying the starting index and it‚Äôs ending index. Note that the ending index is excluded from the result.</p>

<p>We can also specify a negative index. And also note that both of these indices are optional!</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>

<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span>  <span class="c1"># 0,1,2
</span><span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span>  <span class="c1"># 1,2
</span><span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">:]</span>   <span class="c1"># 2,3,4,5
</span><span class="n">a</span><span class="p">[:</span><span class="mi">3</span><span class="p">]</span>   <span class="c1"># 0,1,2
</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="c1"># 0,1,2,3
</span><span class="n">a</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">:]</span>  <span class="c1"># 4,5
</span><span class="n">a</span><span class="p">[:]</span>    <span class="c1"># 0,1,2,3,4,5
</span></code></pre></div></div>

<h3 id="filtering-a-list-in-one-line">Filtering a List In One Line</h3>

<p>We can easily filter a list in Python by combining the <code class="language-plaintext highlighter-rouge">for..in</code> and the <code class="language-plaintext highlighter-rouge">if</code> syntax together:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numbers</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">11</span><span class="p">)</span>

<span class="c1"># Filter even numbers only.
</span><span class="p">[</span><span class="n">numbers</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">numbers</span><span class="p">))</span> <span class="k">if</span> <span class="n">numbers</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span>
<span class="c1"># [2, 4, 6, 8, 10]
</span></code></pre></div></div>

<h3 id="sorting-a-list-in-ascending-order">Sorting a List in Ascending Order</h3>

<p>In Python, we can sort a list in ascending order simply by calling the <code class="language-plaintext highlighter-rouge">sort</code> method like so:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">people</span> <span class="o">=</span> <span class="p">[</span><span class="s">"John"</span><span class="p">,</span> <span class="s">"Alice"</span><span class="p">,</span> <span class="s">"Poe"</span><span class="p">]</span>
<span class="n">people</span><span class="p">.</span><span class="n">sort</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">people</span><span class="p">)</span> <span class="c1"># ["Alice", "John", "Poe"]
</span></code></pre></div></div>

<h3 id="using-filter-function-with-a-list">Using Filter Function with a List</h3>

<p>Just like its name, we can use the <code class="language-plaintext highlighter-rouge">filter</code> function to filter out our list:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numbers</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">11</span><span class="p">)</span>

<span class="n">even_numbers</span> <span class="o">=</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">number</span><span class="p">:</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">,</span> <span class="n">numbers</span><span class="p">)</span>
<span class="c1"># [2, 4, 6, 8, 10]
</span></code></pre></div></div>

<p>We can break the above statement into two parts:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">lambda number: statement</code>: The first part is the function that we would like to run to every item on the list. <code class="language-plaintext highlighter-rouge">number</code> is the variable name we‚Äôd like to use in this function to refer to a single item from the <code class="language-plaintext highlighter-rouge">numbers</code> list. The following function body must evaluate to truthy/falsy value‚Äîfalsy means the current item will be removed from the final result.</li>
  <li><code class="language-plaintext highlighter-rouge">numbers</code>: The second parameter is the list that we‚Äôd like to filter.</li>
</ul>

<h3 id="using-reduce-with-a-list-of-dictionary">Using Reduce with a List of Dictionary</h3>

<p>We can use the <code class="language-plaintext highlighter-rouge">reduce</code> function to calculate the total of a particular key in a list of a dictionary:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">items</span> <span class="o">=</span> <span class="p">[{</span><span class="n">value</span><span class="p">:</span><span class="mi">10</span><span class="p">},</span> <span class="p">{</span><span class="n">value</span><span class="p">:</span><span class="mi">20</span><span class="p">},</span> <span class="p">{</span><span class="n">value</span><span class="p">:</span><span class="mi">50</span><span class="p">}]</span>

<span class="c1"># Calculate the total of value key.
</span><span class="n">totalValues</span> <span class="o">=</span> <span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">total</span><span class="p">,</span> <span class="n">item</span><span class="p">:</span> <span class="n">total</span> <span class="o">+</span> <span class="n">item</span><span class="p">[</span><span class="s">"value"</span><span class="p">],</span> <span class="n">items</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="c1"># 80
</span></code></pre></div></div>

<p>It can be broken down into 4 parts:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">lambda total</code>: It‚Äôs the variable name that we‚Äôd like to use in the function body to refer to the carried or the accumulative value that will finally be returned.</li>
  <li><code class="language-plaintext highlighter-rouge">item: statement</code>: <code class="language-plaintext highlighter-rouge">item</code> is the name of the variable we‚Äôd like to use within the function body to refer to the single item in the <code class="language-plaintext highlighter-rouge">items</code> list. The following function body will be executed in order to define the accumulative value of <code class="language-plaintext highlighter-rouge">total</code> for the next iteration.</li>
  <li><code class="language-plaintext highlighter-rouge">items</code>: It‚Äôs the list of item that we would like to ‚Äúreduce‚Äù.</li>
  <li><code class="language-plaintext highlighter-rouge">0</code>: The last parameter is optional and it‚Äôs the initial accumulative value for the first iteration.</li>
</ul>

<p>We can also use this <code class="language-plaintext highlighter-rouge">reduce</code> function to find a single item from the list. Here‚Äôs an example of code to find the person with the biggest <code class="language-plaintext highlighter-rouge">total_payments</code> within the given list of <code class="language-plaintext highlighter-rouge">people</code> dictionary.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">people</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s">"name"</span><span class="p">:</span> <span class="s">"John"</span><span class="p">,</span> <span class="s">"total_payments"</span><span class="p">:</span> <span class="mi">100</span><span class="p">},</span>
    <span class="p">{</span><span class="s">"name"</span><span class="p">:</span> <span class="s">"Alice"</span><span class="p">,</span> <span class="s">"total_payments"</span><span class="p">:</span> <span class="mi">1000</span><span class="p">},</span>
    <span class="p">{</span><span class="s">"name"</span><span class="p">:</span> <span class="s">"Poe"</span><span class="p">,</span> <span class="s">"total_payments"</span><span class="p">:</span> <span class="mi">800</span><span class="p">}</span>
<span class="p">]</span>

<span class="n">person_biggest_total_payments</span> <span class="o">=</span> <span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">paid_most</span><span class="p">,</span> <span class="n">person</span><span class="p">:</span> <span class="n">person</span> <span class="k">if</span> <span class="n">person</span><span class="p">[</span><span class="s">"total_payments"</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">paid_most</span><span class="p">[</span><span class="s">"total_payments"</span><span class="p">]</span> <span class="k">else</span> <span class="n">paid_most</span><span class="p">,</span> <span class="n">people</span><span class="p">,</span> <span class="p">{</span> <span class="s">"total_payments"</span><span class="p">:</span> <span class="mi">0</span> <span class="p">})</span>
<span class="c1"># {'name': 'Alice', 'total_payments': 1000}
</span></code></pre></div></div>

<h2 id="working-with-dictionary">Working with Dictionary</h2>

<h3 id="loop-through-dictionary">Loop Through Dictionary</h3>

<p>We can use the <code class="language-plaintext highlighter-rouge">itervalues</code> method to loop through a dictionary:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">person</span> <span class="ow">in</span> <span class="n">people</span><span class="p">.</span><span class="n">itervalues</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="n">person</span><span class="p">[</span><span class="s">"email_address"</span><span class="p">])</span>
</code></pre></div></div>

<p>We can also use the <code class="language-plaintext highlighter-rouge">iteritems</code> method if we want to access the key too:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">person</span> <span class="ow">in</span> <span class="n">people</span><span class="p">.</span><span class="n">iteritems</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="n">person</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">person</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">"email_address"</span><span class="p">])</span>
</code></pre></div></div>

<h3 id="calculate-total-of-particular-dictionary-key">Calculate Total of Particular Dictionary Key</h3>

<p>Suppose we would like to calculate the total amount of <code class="language-plaintext highlighter-rouge">salary</code> key on a <code class="language-plaintext highlighter-rouge">people</code> dictionary. We can extract the <code class="language-plaintext highlighter-rouge">salary</code> key and use the <code class="language-plaintext highlighter-rouge">sum</code> function to get the total:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">total_salary</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">([</span><span class="n">person</span><span class="p">[</span><span class="s">"salary"</span><span class="p">]</span> <span class="k">for</span> <span class="n">person</span> <span class="ow">in</span> <span class="n">people</span><span class="p">.</span><span class="n">itervalues</span><span class="p">()])</span>
</code></pre></div></div>

<h2 id="working-with-numpy">Working with Numpy</h2>

<h3 id="numpy-create-range-of-values-with-the-given-interval">Numpy Create Range of Values with The Given Interval</h3>

<p>Use the <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.arange.html"><code class="language-plaintext highlighter-rouge">arange</code></a> method to create an array with an evenly spaced interval.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="c1"># array([0,1,2,3,4])
</span>
<span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">)</span>
<span class="c1"># array([1. , 1.5, 2. , 2.5, 3. , 3.5])
</span></code></pre></div></div>

<h3 id="numpy-create-coordinate-matrices-from-coordinate-vectors">Numpy Create Coordinate Matrices from Coordinate Vectors</h3>

<p>We can use the Numpy <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.meshgrid.html"><code class="language-plaintext highlighter-rouge">meshgrid</code></a> method to make coordinate matrices from one-dimentional coordinate arrays.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">np</span><span class="p">.</span><span class="n">meshgrid</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">7</span><span class="p">])</span>
<span class="c1"># [
#   array([[1,2,3], [1,2,3]]),
#   array([[0,0,0], [7,7,7]])
# ]
</span></code></pre></div></div>

<h3 id="flatten-numpy-array">Flatten Numpy Array</h3>

<p>When we have a multi-dimensional Numpy array, we can easily flatten it with the <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.ravel.html"><code class="language-plaintext highlighter-rouge">ravel</code></a> method:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]])</span>
<span class="n">arr</span><span class="p">.</span><span class="n">ravel</span><span class="p">()</span>
<span class="c1"># array([1, 2, 3, 4])
</span></code></pre></div></div>

<h3 id="pairing-array-values-with-second-axis">Pairing Array Values with Second Axis</h3>

<p>We can use Numpy <code class="language-plaintext highlighter-rouge">c_</code> function to pair array values with another array that will be it‚Äôs second axis. Read the <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.c_.html"><code class="language-plaintext highlighter-rouge">numpy.c_</code> documentation</a>.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span>
<span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">]</span>

<span class="n">np</span><span class="p">.</span><span class="n">c_</span><span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">]</span>
<span class="c1"># array([1,10], [2,20])
</span></code></pre></div></div>

<h3 id="generate-coordinates-across-the-grid">Generate Coordinates Across The Grid</h3>

<p>With the knowledge of Numpy <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.arange.html"><code class="language-plaintext highlighter-rouge">arange</code></a>, <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.meshgrid.html"><code class="language-plaintext highlighter-rouge">meshgrid</code></a>, <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.ravel.html"><code class="language-plaintext highlighter-rouge">ravel</code></a> and <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.c_.html"><code class="language-plaintext highlighter-rouge">c_</code></a> methods, we can easily generate an evenly spaced coordinates across the grid so we can pass it to the classifier and plot the decision surface.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="c1"># Generate an evenly spaced coordinates.
</span><span class="n">x_points</span><span class="p">,</span> <span class="n">y_points</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">meshgrid</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="n">x_min</span><span class="p">,</span> <span class="n">x_max</span><span class="p">,</span> <span class="n">step</span><span class="p">),</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="n">y_min</span><span class="p">,</span> <span class="n">y_max</span><span class="p">,</span> <span class="n">step</span><span class="p">))</span>

<span class="c1"># Pair the x and y points.
</span><span class="n">test_coordinates</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">c_</span><span class="p">[</span><span class="n">x_points</span><span class="p">.</span><span class="n">ravel</span><span class="p">(),</span> <span class="n">y_points</span><span class="p">.</span><span class="n">ravel</span><span class="p">()]</span>
</code></pre></div></div>

<h2 id="plotting-the-data">Plotting the Data</h2>

<h3 id="plot-the-surface-decision">Plot The Surface Decision</h3>

<p>We can pass an evenly spaced coordinates across the grid to the classifier to predict the output on each of that coordinate. We can then use <a href="https://matplotlib.org/api/pyplot_api.html"><code class="language-plaintext highlighter-rouge">matplotlib.pyplot</code></a> to plot the surface decision.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">pylab</span> <span class="k">as</span> <span class="n">pl</span>

<span class="c1"># Pass coordinates across the grid.
</span><span class="n">predicted_labels</span> <span class="o">=</span> <span class="n">classifier</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">test_coordinates</span><span class="p">)</span>

<span class="c1"># Don't forget to reshape the output array dimension.
</span><span class="n">predicted_labels</span> <span class="o">=</span> <span class="n">predicted_labels</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">x_points</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>

<span class="c1"># Set the axes limit.
</span><span class="n">plt</span><span class="p">.</span><span class="n">xlim</span><span class="p">(</span><span class="n">x_points</span><span class="p">.</span><span class="nb">min</span><span class="p">(),</span> <span class="n">x_points</span><span class="p">.</span><span class="nb">max</span><span class="p">())</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylim</span><span class="p">(</span><span class="n">y_points</span><span class="p">.</span><span class="nb">min</span><span class="p">(),</span> <span class="n">y_points</span><span class="p">.</span><span class="nb">max</span><span class="p">())</span>

<span class="c1"># Plot the decision boundary with seismic color map.
</span><span class="n">plt</span><span class="p">.</span><span class="n">pcolormesh</span><span class="p">(</span><span class="n">x_points</span><span class="p">,</span> <span class="n">y_points</span><span class="p">,</span> <span class="n">predicted_labels</span><span class="p">,</span> <span class="n">cmap</span> <span class="o">=</span> <span class="n">pl</span><span class="p">.</span><span class="n">cm</span><span class="p">.</span><span class="n">seismic</span><span class="p">)</span>
</code></pre></div></div>

<p>The classifier output would be a one-dimensional array, so don‚Äôt forget to <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html"><code class="language-plaintext highlighter-rouge">reshape</code></a> it back into a two-dimensional array before plotting. The <code class="language-plaintext highlighter-rouge">cmap</code> is an optional parameter for the color map. Here we use the <code class="language-plaintext highlighter-rouge">seismic</code> color map from <code class="language-plaintext highlighter-rouge">pylab</code> module. It has the red-blue colors.</p>

<h3 id="scatter-plot">Scatter Plot</h3>

<p>We need to separate the test points based on its predicted label (the speed). So we can plot the test points with two different colors.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Separate fast (label = 0) &amp; slow (label = 1) test points.
</span><span class="n">grade_fast</span> <span class="o">=</span> <span class="p">[</span><span class="n">features_test</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">features_test</span><span class="p">))</span> <span class="k">if</span> <span class="n">labels_test</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span>
<span class="n">bumpy_fast</span> <span class="o">=</span> <span class="p">[</span><span class="n">features_test</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">features_test</span><span class="p">))</span> <span class="k">if</span> <span class="n">labels_test</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span>
<span class="n">grade_slow</span> <span class="o">=</span> <span class="p">[</span><span class="n">features_test</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">features_test</span><span class="p">))</span> <span class="k">if</span> <span class="n">labels_test</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">]</span>
<span class="n">bumpy_slow</span> <span class="o">=</span> <span class="p">[</span><span class="n">features_test</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">features_test</span><span class="p">))</span> <span class="k">if</span> <span class="n">labels_test</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">]</span>

<span class="c1"># Plot the test points based on its speed.
</span><span class="n">plt</span><span class="p">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">grade_fast</span><span class="p">,</span> <span class="n">bumpy_fast</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="s">"b"</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="s">"fast"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">grade_slow</span><span class="p">,</span> <span class="n">bumpy_slow</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="s">"r"</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="s">"slow"</span><span class="p">)</span>

<span class="c1"># Show the plot legend.
</span><span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>

<span class="c1"># Add the axis labels.
</span><span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">"grade"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">"bumpiness"</span><span class="p">)</span>

<span class="c1"># Show the plot.
</span><span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p>If we want to save the plot into an image, we can use the <code class="language-plaintext highlighter-rouge">savefig</code> method instead:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">savefig</span><span class="p">(</span><span class="s">'scatter_plot.png'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="dealing-with-data">Dealing with Data</h2>

<h3 id="deserializing-python-object">Deserializing Python Object</h3>

<p>We can use <a href="https://docs.python.org/2/library/pickle.html"><code class="language-plaintext highlighter-rouge">pickle</code></a> module for serializing and deserializing Python object. There‚Äôs also the <code class="language-plaintext highlighter-rouge">cPickle</code>‚Äîthe faster C implementation. We use both of these modules to deserialize the email text and author list.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pickle</span>
<span class="kn">import</span> <span class="nn">cPickle</span>

<span class="c1"># Unpickling or deserializing the texts.
</span><span class="n">texts_file_handler</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">texts_file</span><span class="p">,</span> <span class="s">"r"</span><span class="p">)</span>
<span class="n">texts</span> <span class="o">=</span> <span class="n">cPickle</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">texts_file_handler</span><span class="p">)</span>
<span class="n">texts_file_handler</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

<span class="c1"># Unpickling or deserializing the authors.
</span><span class="n">authors_file_handler</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">authors_file</span><span class="p">,</span> <span class="s">"r"</span><span class="p">)</span>
<span class="n">authors</span> <span class="o">=</span> <span class="n">pickle</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">authors_file_handler</span><span class="p">)</span>
<span class="n">authors_file_handler</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="split-data-for-training-and-testing">Split Data for Training and Testing</h3>

<p>We can use the built-in <a href="http://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html"><code class="language-plaintext highlighter-rouge">train_test_split</code></a> function from scikit-learn to split the data both for training and testing.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>

<span class="n">features_train</span><span class="p">,</span> <span class="n">features_test</span><span class="p">,</span> <span class="n">labels_train</span><span class="p">,</span> <span class="n">labels_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">texts</span><span class="p">,</span> <span class="n">authors</span><span class="p">,</span> <span class="n">test_size</span> <span class="o">=</span> <span class="mf">0.1</span><span class="p">,</span> <span class="n">random_state</span> <span class="o">=</span> <span class="mi">42</span><span class="p">)</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">test_size</code> argument is the proportion of data to split into the test, in our case we split 10% for testing.</p>

<h3 id="vectorized-the-strings">Vectorized the Strings</h3>

<p>When working with a text document, we need to vectorize the strings into a list of numbers so it‚Äôs easier and more efficient to process. We can use the <a href="http://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.html"><code class="language-plaintext highlighter-rouge">TfidfVectorizer</code></a> class to vectorize the strings into a matrix of TF-IDF features.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sklearn.feature_extraction.text</span> <span class="kn">import</span> <span class="n">TfidfVectorizer</span>

<span class="n">vectorizer</span> <span class="o">=</span> <span class="n">TfidfVectorizer</span><span class="p">(</span><span class="n">sublinear_tf</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span> <span class="n">max_df</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">,</span> <span class="n">stop_words</span> <span class="o">=</span> <span class="s">"english"</span><span class="p">)</span>
<span class="n">features_train_transformed</span> <span class="o">=</span> <span class="n">vectorizer</span><span class="p">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">features_train</span><span class="p">)</span>
<span class="n">features_test_transformed</span> <span class="o">=</span> <span class="n">vectorizer</span><span class="p">.</span><span class="n">transform</span><span class="p">(</span><span class="n">features_test</span><span class="p">)</span>
</code></pre></div></div>

<p>Word with a frequency higher than the <code class="language-plaintext highlighter-rouge">max_df</code> will be ignored. Stop words are also ignored‚Äîstop words are the most common words in a language (e.g. a, the, has).</p>

<h3 id="feature-selection">Feature Selection</h3>

<p>Text can have a lot of features thus it may slow to compute. We can use scikit <a href="http://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.SelectPercentile.html"><code class="language-plaintext highlighter-rouge">SelectPercentile</code></a> class to select only the important features.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">selector</span> <span class="o">=</span> <span class="n">SelectPercentile</span><span class="p">(</span><span class="n">f_classif</span><span class="p">,</span> <span class="n">percentile</span> <span class="o">=</span> <span class="mi">10</span><span class="p">)</span>
<span class="n">selector</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">features_train_transformed</span><span class="p">,</span> <span class="n">labels_train</span><span class="p">)</span>
<span class="n">selected_features_train_transformed</span> <span class="o">=</span> <span class="n">selector</span><span class="p">.</span><span class="n">transform</span><span class="p">(</span><span class="n">features_train_transformed</span><span class="p">).</span><span class="n">toarray</span><span class="p">()</span>
<span class="n">selected_features_test_transformed</span> <span class="o">=</span> <span class="n">selector</span><span class="p">.</span><span class="n">transform</span><span class="p">(</span><span class="n">features_test_transformed</span><span class="p">).</span><span class="n">toarray</span><span class="p">()</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">percentile</code> is the percentage of features that we‚Äôd like to select based on its highest score.</p>

<p><strong>This article is for Demo purpose</strong></p>

<p>The article was originally on <a href="https://github.com/risan/risanb.com/blob/master/content/posts/python-notes-from-intro-to-machine-learning/index.md">this repo</a></p>
:ET